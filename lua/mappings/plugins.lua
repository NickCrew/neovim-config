-- Plugin Mappings
--

local opts = { noremap = false, silent = true }
local kopts = {noremap = true, silent = true}

-- Code action menu
-- Mapper.map( 
--   'n',
--   '<C-e>a',
--   '<Cmd>CodeActionMenu<CR>',
--   opts,
--   'Diagnostics',
--   'diag_codeactionmenu',
--   'Show Code Action Menu'
-- )
-- Invoke completion
-- Mapper.map(
--   'i',
--   '<C-x><C-o>',
--   "<Cmd>lua require('cmp').complete()<CR>",
--   opts,
--   "Completion",
--   "cmp_invokecomplete",
--   "Invoke Completion"
-- )
-- Mapper.map(
-- 	"n",
-- 	"<leader>2d",
-- 	":TodoQuickFix<CR>",
-- 	opts,
-- 	"Diagnostics",
-- 	"todo_qf",
-- 	"Open TODOs in QuickFix Window"
-- )
-- -- Toggle Underline
-- Mapper.map(
-- 	"n",
-- 	"<leader>tlu",
-- 	"<Plug>(toggle-lsp-diag-underline)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_ul",
-- 	"Toggle Underline"
-- )
-- -- Toggle Signs
-- Mapper.map(
-- 	"n",
-- 	"<leader>tls",
-- 	"<Plug>(toggle-lsp-diag-signs)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_signs",
-- 	"Toggle Signs"
-- )
-- -- Toggle Virtual Text
-- Mapper.map(
-- 	"n",
-- 	"<leader>tlv",
-- 	"<Plug>(toggle-lsp-diag-vtext)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_vtext",
-- 	"Toggle Virtual Text"
-- )
-- -- Toggle Update on Insert
-- Mapper.map(
-- 	"n",
-- 	"<leader>tlp",
-- 	"<Plug>(toggle-lsp-diag-update_in_insert)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_upins",
-- 	"Toggle Update on Insert"
-- )
-- -- Toggle Diagnostics
-- Mapper.map(
-- 	"n",
-- 	"<leader>tld",
-- 	"<Plug>(toggle-lsp-diag)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl",
-- 	"Toggle Diagnostics"
-- )
-- -- Set All To Default
-- Mapper.map(
-- 	"n",
-- 	"<leader>tldd",
-- 	"<Plug>(toggle-lsp-diag-default)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_default",
-- 	"Set All To Default"
-- )
-- -- Turn Off
-- Mapper.map(
-- 	"n",
-- 	"<leader>tldo",
-- 	"<Plug>(toggle-lsp-diag-off)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_off",
-- 	"Turn Off"
-- )
-- -- Turn On
-- Mapper.map(
-- 	"n",
-- 	"<leader>tldf",
-- 	"<Plug>(toggle-lsp-diag-on)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_on",
-- 	"Turn On"
-- )
-- Toggle Trouble
-- Mapper.map(
-- 	"n",
-- 	"<leader>xx",
-- 	"<cmd>TroubleToggle<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl_toggle",
-- 	"Toggle Trouble"
-- )
-- -- Workspace Diagnostics
-- Mapper.map(
-- 	"n",
-- 	"<leader>xw",
-- 	"<cmd>TroubleToggle workspace_diagnostics<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl__wkspace",
-- 	"Workspace Diagnostics"
-- )
-- -- Document Diagnostics
-- Mapper.map(
-- 	"n",
-- 	"<leader>xd",
-- 	"<cmd>TroubleToggle document_diagnostics<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl_doc",
-- 	"Document Diagnostics"
-- )
-- -- Open Diagnostics in QuickFix
-- Mapper.map(
-- 	"n",
-- 	"<leader>xq",
-- 	"<cmd>TroubleToggle quickfix<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl_qfx",
-- 	"Open Diagnostics in QuickFix"
-- )
-- -- Open Diagnostics in Location List
-- Mapper.map(
-- 	"n",
-- 	"<leader>xl",
-- 	"<cmd>TroubleToggle loclist<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl_loc",
-- 	"Open Diagnostics in Location List"
-- )
-- -- Diagnostics References
-- Mapper.map(
-- 	"n",
-- 	"<leader>gR",
-- 	"<cmd>TroubleToggle lsp_references<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl_ref",
-- 	"Diagnostics References"
-- )
-- -- Open TODOs in QuickFix Window
-- Mapper.map(
-- 	"n",
-- 	"<leader>2d",
-- 	":TodoQuickFix<CR>",
-- 	opts,
-- 	"Diagnostics",
-- 	"todo_qf",
-- 	"Open TODOs in QuickFix Window"
-- )
-- -- Toggle Underline
-- Mapper.map(
-- 	"n",
-- 	"<leader>tlu",
-- 	"<Plug>(toggle-lsp-diag-underline)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_ul",
-- 	"Toggle Underline"
-- )
-- -- Toggle Signs
-- Mapper.map(
-- 	"n",
-- 	"<leader>tls",
-- 	"<Plug>(toggle-lsp-diag-signs)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_signs",
-- 	"Toggle Signs"
-- )
-- -- Toggle Virtual Text
-- Mapper.map(
-- 	"n",
-- 	"<leader>tlv",
-- 	"<Plug>(toggle-lsp-diag-vtext)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_vtext",
-- 	"Toggle Virtual Text"
-- )
-- -- Toggle Update on Insert
-- Mapper.map(
-- 	"n",
-- 	"<leader>tlp",
-- 	"<Plug>(toggle-lsp-diag-update_in_insert)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_upins",
-- 	"Toggle Update on Insert"
-- )
-- -- Toggle Diagnostics
-- Mapper.map(
-- 	"n",
-- 	"<leader>tld",
-- 	"<Plug>(toggle-lsp-diag)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl",
-- 	"Toggle Diagnostics"
-- )
-- -- Set All To Default
-- Mapper.map(
-- 	"n",
-- 	"<leader>tldd",
-- 	"<Plug>(toggle-lsp-diag-default)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_default",
-- 	"Set All To Default"
-- )
-- -- Turn Off
-- Mapper.map(
-- 	"n",
-- 	"<leader>tldo",
-- 	"<Plug>(toggle-lsp-diag-off)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_off",
-- 	"Turn Off"
-- )
-- -- Turn On
-- Mapper.map(
-- 	"n",
-- 	"<leader>tldf",
-- 	"<Plug>(toggle-lsp-diag-on)",
-- 	{ noremap = false, silent = true },
-- 	"Diagnostics",
-- 	"diag_togl_on",
-- 	"Turn On"
-- )
-- -- Toggle Trouble
-- Mapper.map(
-- 	"n",
-- 	"<leader>xx",
-- 	"<cmd>TroubleToggle<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl_toggle",
-- 	"Toggle Trouble"
-- )
-- -- Workspace Diagnostics
-- Mapper.map(
-- 	"n",
-- 	"<leader>xw",
-- 	"<cmd>TroubleToggle workspace_diagnostics<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl__wkspace",
-- 	"Workspace Diagnostics"
-- )
-- -- Document Diagnostics
-- Mapper.map(
-- 	"n",
-- 	"<leader>xd",
-- 	"<cmd>TroubleToggle document_diagnostics<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl_doc",
-- 	"Document Diagnostics"
-- )
-- -- Open Diagnostics in QuickFix
-- Mapper.map(
-- 	"n",
-- 	"<leader>xq",
-- 	"<cmd>TroubleToggle quickfix<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl_qfx",
-- 	"Open Diagnostics in QuickFix"
-- )
-- -- Open Diagnostics in Location List
-- Mapper.map(
-- 	"n",
-- 	"<leader>xl",
-- 	"<cmd>TroubleToggle loclist<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl_loc",
-- 	"Open Diagnostics in Location List"
-- )
-- -- Diagnostics References
-- Mapper.map(
-- 	"n",
-- 	"<leader>gR",
-- 	"<cmd>TroubleToggle lsp_references<cr>",
-- 	opts,
-- 	"Diagnostics",
-- 	"trbl_ref",
-- 	"Diagnostics References"
-- )
-- -- Toggle Twilight
-- Mapper.map(
-- 	"n",
-- 	"<C-e><C-t>",
-- 	":Twilight<CR>",
-- 	opts,
-- 	"UI",
-- 	"ui_twilighttoggl",
-- 	"Toggle Twilight"
-- )
-- -- Show Git Messages
-- Mapper.map(
-- 	"n",
-- 	"<leader>Gm",
-- 	"<Plug>(git-messenger",
-- 	{ noremap = false, silent = false },
-- 	"Git",
-- 	"git_messenger",
-- 	"Show Git Messages"
-- )
-- -- Toggle Git Blame
-- Mapper.map(
-- 	"n",
-- 	"<leader>gb",
-- 	":Gitsigns toggle_current_line_blame<CR>",
-- 	opts,
-- 	"Git",
-- 	"git_toggle_blame",
-- 	"Toggle Git Blame"
-- )
-- -- Toggle Git Blame
-- Mapper.map(
-- 	"n",
-- 	"<leader>gb",
-- 	":Gitsigns toggle_current_line_blame<CR>",
-- 	opts,
-- 	"Git",
-- 	"git_toggle_blame",
-- 	"Toggle Git Blame"
-- )
-- Open Cheatsheet
-- Mapper.map(
-- 	"n",
-- 	"<C-e>C",
-- 	":Cheatsheet<CR>",
-- 	opts,
-- 	"Cheatsheets",
-- 	"cheat_open",
-- 	"Open Cheatsheet"
-- )
-- Run Tests
-- Mapper.map(
-- 	"n",
-- 	"<leader><leader>t",
-- 	":Ultest<CR>",
-- 	opts,
-- 	"Tests",
-- 	"ultest_run",
-- 	"Run Tests"
-- )
-- Mapper.map(
--   "n",
--   "<leader><leader>w",
--   ":WhichKey<CR>",
--   opts,
--   "Keybindings",
--   "keys_showwhichkey",
--   "Toggle Legend"
-- )
-- Mapper.map(
--   "n",
--   "<leader>i",
--   "<Plug>(IPy-Run)",
--   opts,
--   "IPython",
--   "ipy_run",
--   "Run current line or selection in IPython"
-- )
-- Mapper.map(
--   "n",
--   "<leader>ia",
--   "<Plug>(IPy-RunAll)",
--   opts,
--   "IPython",
--   "ipy_runall",
--   "Run All Lines in Buffer"
-- )
-- -- You can also use below = true here to to change the position of the printf
-- -- statement (or set two remaps for either one). This remap must be made in normal mode.
-- Mapper.map(
--     "n",
--     "<leader>rp",
--     ":lua require('refactoring').debug.printf({below = false})<CR>",
--     opts,
--     "Refactoring",
--     "refac_debugprint",
--     "Debug Print"
-- )
-- -- Print var: this remap should be made in visual mode
-- Mapper.map(
--     "v",
--     "<leader>rv",
--     ":lua require('refactoring').debug.print_var({})<CR>",
--     opts,
--     "Refactoring",
--     "refac_printvar",
--     "Debug Print Variable"
-- )
-- -- Cleanup function: this remap should be made in normal mode
-- Mapper.map(
--     "n",
--     "<leader>rc",
--     ":lua require('refactoring').debug.cleanup({})<CR>",
--     opts,
--     "Refactoring",
--     "refac_cleanup",
--     "Cleanup"
-- )
-- -- Remaps for each of the four debug operations currently offered by the plugin
-- Mapper.map(
--     "v",
--     "<Leader>re",
--     [[ <Esc><Cmd>lua require('refactoring').refactor('Extract Function')<CR>]],
--     { noremap = true, silent = true, expr = false },
--     "Refactoring",
--     "refac_exfunc",
--     "Extract Function From Selection"
-- )
-- -- Extract Function From Selection
-- Mapper.map(
--     "v",
--     "<Leader>rf",
--     [[ <Esc><Cmd>lua require('refactoring').refactor('Extract Function To File')<CR>]],
--     { noremap = true, silent = true, expr = false },
--     "Refactoring",
--     "refac_exfunctofile",
--     "Extract Function To File"
--     -- Extract Function From Selection
-- )
-- -- Extract Variable From Selection
-- Mapper.map(
--     "v",
--     "<Leader>rv",
--     [[ <Esc><Cmd>lua require('refactoring').refactor('Extract Variable')<CR>]],
--     { noremap = true, silent = true, expr = false },
--     "Refactoring",
--     "refac_exvar",
--     "Extract Variable From Selection"
-- )
-- -- Inline Variable
-- Mapper.map(
--     "v",
--     "<Leader>ri",
--     [[ <Esc><Cmd>lua require('refactoring').refactor('Inline Variable')<CR>]],
--     { noremap = true, silent = true, expr = false },
--     "Refactoring",
--     "refac_invar",
--     "Inline Variable"
-- )

-- -- Toggle Aerial Sidebar

-- -- -- Open PeekUp
-- -- Mapper.map(
-- -- 	"n",
-- -- 	'<leader>"',
-- -- 	"<cmd>lua require('nvim-peekup').peekup_open()<CR>",
-- -- 	opts,
-- -- 	"Yank/Paste",
-- -- 	"clip_peekup",
-- -- 	"Open PeekUp"
-- -- )
-- -- Toggle QuickFix Window
-- Mapper.map(
-- 	"n",
-- 	"<leader>qq",
-- 	"<cmd>lua require('core.utils').toggle_qf()<CR>",
-- 	opts,
-- 	"QuickFix",
-- 	"qf_toggle2",
-- 	"Toggle QuickFix Window"
-- )
-- -- Toggle QuickFix Window
-- Mapper.map(
-- 	"n",
-- 	"cq",
-- 	"<cmd>lua require('core.utils').toggle_qf()<CR>",
-- 	opts,
-- 	"QuickFix",
-- 	"qf_toggle",
-- 	"Toggle QuickFix Window"
-- )
-- -- Toggle File Tree
-- Mapper.map(
-- 	"n",
-- 	"<leader><leader>f",
-- 	":Fern . -drawer -toggle<CR>",
-- 	opts,
-- 	"Fern",
-- 	"filedrawer_toggle",
-- 	"Toggle File Tree"
-- )
-- Next Buffer

-- -- Previous Test Failure
-- Mapper.map(
-- 	"n",
-- 	"[t",
-- 	"<Plug>(ultest-prev-fail)",
-- 	opts,
-- 	"Tests",
-- 	"tests_prevfail",
-- 	"Previous Test Failure"
-- )
-- -- Next Test Failure
-- Mapper.map(
-- 	"n",
-- 	"]t",
-- 	"<Plug>(ultest-next-fail)",
-- 	opts,
-- 	"Tests",
-- 	"tests_nextfail",
-- 	"Next Test Failure"
-- )
-- Delete Buffer
-- Mapper.map(
-- 	"n",
-- 	"<leader>db",
-- 	":bd<CR>",
-- 	opts,
-- 	"Buffers",
-- 	"buf_del",
-- 	"Delete Buffer"
-- )
-- -- Pick Buffer
-- Mapper.map(
-- 	"n",
-- 	"<leader><leader>p",
-- 	":BufferLinePick<CR>",
-- 	opts,
-- 	"Buffers",
-- 	"buf_pick",
-- 	"Pick Buffer"
-- )
-- -- Re-order Buffer Next
-- Mapper.map(
-- 	"n",
-- 	"<A->>",
-- 	":BufferLineMoveNext<CR>",
-- 	opts,
-- 	"Buffers",
-- 	"buf_movenext",
-- 	"Re-order Buffer Next"
-- )
-- -- Re-order Buffer Previous
-- Mapper.map(
-- 	"n",
-- 	"<A-<>",
-- 	":BufferLineMovePrevious<CR>",
-- 	opts,
-- 	"Buffers",
-- 	"buf_moveprev",
-- 	"Re-order Buffer Previous"
-- )
local opts = { noremap = true, silent = true }
-- Hop To Word
-- Mapper.map(
-- 	"n",
-- 	"<leader>;",
-- 	":Legendary<CR>",
-- 	opts,
-- 	"Legendary",
-- 	"legend_all",
-- 	"Show Command Palette"
-- )
-- -- Hop To Word After Cursor
-- Mapper.map(
-- 	"n",
-- 	"<leader>h",
-- 	":HopWordAC<CR>",
-- 	opts,
-- 	"Movement",
-- 	"hop_wordafter",
-- 	"Hop To Word After Cursor"
-- )
-- -- Hop To Word Before Cursor
-- Mapper.map(
-- 	"n",
-- 	"<leader>H",
-- 	":HopWordBC<CR>",
-- 	opts,
-- 	"Movement",
-- 	"hop_wordbefore",
-- 	"Hop To Word Before Cursor"
-- )
-- Hop To Line
-- Mapper.map(
-- 	"n",
-- 	"<leader><leader>l",
-- 	":HopLine<CR>",
-- 	opts,
-- 	"Movement",
-- 	"hop_line2",
-- 	"Hop To Line"
-- )

-- Hop To Character(1) In Current Line
-- Mapper.map(
-- 	"n",
-- 	"<leader>l",
-- 	":HopChar1CurrentLine<CR>",
-- 	opts,
-- 	"Movement",
-- 	"hop_char1line",
-- 	"Hop To Character(1) In Current Line"
-- )
-- -- Hop To Characters(2) After Cursor
-- Mapper.map(
-- 	"n",
-- 	"<leader>s",
-- 	":HopChar2AC<CR>",
-- 	opts,
-- 	"Movement",
-- 	"hop_char2_after",
-- 	"Hop To Characters(2) After Cursor"
-- )
-- -- Hop To Characters(2) Before Cursor
-- Mapper.map(
-- 	"n",
-- 	"<leader>S",
-- 	":HopChar2BC<CR>",
-- 	opts,
-- 	"Movement",
-- 	"hop_char2_before",
-- 	"Hop To Characters(2) Before Cursor"
-- )
-- Hop To Word In Current Line
-- Mapper.map(
-- 	"n",
-- 	"<leader>w",
-- 	":HopWordCurrentLine<CR>",
-- 	opts,
-- 	"Movement",
-- 	"hop_wordcline",
-- 	"Hop To Word In Current Line"
-- )

-- -- Move To Previous Window
-- Mapper.map(
-- 	"n",
-- 	"<C-e>p",
-- 	"<CMD>lua require('Navigator').previous()<CR>",
-- 	opts,
-- 	"Navigation",
-- 	"nav_prev",
-- 	"Move To Previous Window"
-- )
-- Load Persistence
-- Mapper.map(
-- 	"n",
-- 	"<leader>qs",
-- 	[[<cmd>lua require("persistence").load()<cr>]],
-- 	opts,
-- 	"Session",
-- 	"sesh_loadpersist",
-- 	"Load Persistence"
-- )
-- -- restore the last session
-- Mapper.map(
-- 	"n",
-- 	"<leader>ql",
-- 	[[<cmd>lua require("persistence").load({ last = true })<cr>]],
-- 	opts,
-- 	"Session",
-- 	"sesh_loadlastpersist",
-- 	"Load Last Persistence Session"
-- )
-- -- stop Persistence => session won't be saved on exit
-- Mapper.map(
-- 	"n",
-- 	"<leader>qd",
-- 	[[<cmd>lua require("persistence").stop()<cr>]],
-- 	opts,
-- 	"Session",
-- 	"sesh_stoppersist",
-- 	"Stop Persistence"
-- )
-- Toggle Mundo
-- Mapper.map(
-- 	"n",
-- 	"<C-e>u",
-- 	":MundoToggle<CR>",
-- 	opts,
-- 	"Sidebars",
-- 	"undo_mundotoggl",
-- 	"Toggle Mundo"
-- )
-- -- Open Spectre
-- Mapper.map(
-- 	"n",
-- 	"<C-e>S",
-- 	"<cmd>lua require('spectre').open()<CR>",
-- 	opts,
-- 	"Spectre",
-- 	"search_openspectre",
-- 	"Open Spectre"
-- )
-- -- Current Word Search
-- Mapper.map(
-- 	"n",
-- 	"<leader><leader>sw",
-- 	"<cmd>lua require('spectre').open_visual({select_word=true})<CR>",
-- 	opts,
-- 	"Spectre",
-- 	"search_openspectrevissel",
-- 	"Current Word Search"
-- )
-- Mapper.map(
-- 	"n",
-- 	"<C-e>s",
-- 	"<cmd>lua require('spectre').open_visual()<CR>",
-- 	opts,
-- 	"Spectre",
-- 	"search_openspectrevis",
-- 	"Current Word Search"
-- )
-- -- File Search
-- Mapper.map(
-- 	"n",
-- 	"<leader><leader>sp",
-- 	"viw:lua require('spectre').open_file_search()<cr>",
-- 	opts,
-- 	"Spectre",
-- 	"search_openfilespectre",
-- 	"File Search"
-- )
-- Show Clip History
-- Mapper.map( 
--   "n",
--   "<leader><leader>c",
--   "<Cmd>Telescope neoclip",
--   opts,
--   "Clipboard",
--   "tele_neoclip",
--   "Show Clipboard History"
-- )
-- -- Find Files
-- Mapper.map(
-- 	"n",
-- 	"<C-e><C-b>",
-- 	":Telescope file_browser<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_filebrowser",
-- 	"Find Browser"
-- )
-- -- Find Files
-- Mapper.map(
-- 	"n",
-- 	"<C-a>f",
-- 	":Telescope find_files<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_ff2",
-- 	"Find Files"
-- )
-- Find Files
-- Mapper.map(
-- 	"n",
-- 	"<leader>ff",
-- 	":Telescope find_files<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_ff",
-- 	"Find Files"
-- )
-- Find Buffers
-- Mapper.map(
-- 	"n",
-- 	"<C-a>p",
-- 	":Telescope buffers<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_buf",
-- 	"Find Buffers"
-- )
-- -- Live Grep
-- Mapper.map(
-- 	"n",
-- 	"<leader>g",
-- 	":Telescope live_grep<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_lgrep",
-- 	"Live Grep"
-- )
-- -- Command History
-- Mapper.map(
-- 	"n",
-- 	"<leader>ch",
-- 	":Telescope command_history<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_cmdhist",
-- 	"Command History"
-- )
-- -- Diagnostics
-- Mapper.map(
-- 	"n",
-- 	"<leader><leader>dd",
-- 	":Telescope diagnostics<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_diag",
-- 	"Diagnostics"
-- )
-- -- Registers
-- Mapper.map(
-- 	"n",
-- 	"<leader>r",
-- 	":Telescope registers<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_reg",
-- 	"Registers"
-- )
-- -- Marks
-- Mapper.map(
-- 	"n",
-- 	"<leader>m",
-- 	":Telescope marks<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_marks",
-- 	"Marks"
-- )
-- -- Commands
-- Mapper.map(
-- 	"n",
-- 	"<C-e>c",
-- 	":Telescope commands<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_cmds",
-- 	"Commands"
-- )
-- -- Open Task List
-- Mapper.map(
-- 	"n",
-- 	"<leader>to",
-- 	'<cmd>lua require("telescope").extensions.vstask.tasks()<CR>',
-- 	opts,
-- 	"Tasks",
-- 	"tasks_tasks",
-- 	"Open Task List"
-- )
-- -- Close Task List
-- Mapper.map(
-- 	"n",
-- 	"<leader>tc",
-- 	'<cmd>lua require("telescope").extensions.vstask.close()<CR>',
-- 	opts,
-- 	"Tasks",
-- 	"tasks_close",
-- 	"Close Task List"
-- )
-- -- Open Task Input List
-- Mapper.map(
-- 	"n",
-- 	"<leader>ti",
-- 	'<cmd>lua require("telescope").extensions.vstask.inputs()<CR>',
-- 	opts,
-- 	"Tasks",
-- 	"tasks_inputs",
-- 	"Open Task Input List"
-- )
-- Refactoring
-- Mapper.map(
-- 	"v",
-- 	"<leader>rr",
-- 	"<Esc><cmd>lua require('telescope').extensions.refactoring.refactors()<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_refactor",
-- 	"Refactoring"
-- )
-- -- Show Harpoon Marks
-- Mapper.map(
-- 	"n",
-- 	"<C-e>h",
-- 	":Telescope harpoon marks<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_harpoon",
-- 	"Show Harpoon Marks"
-- )
-- -- Live Grep Raw
-- Mapper.map(
-- 	"n",
-- 	"<leader>lgr",
-- 	':lua require("telescope").extensions.live_grep_raw.live_grep_raw()',
-- 	opts,
-- 	"Telescope",
-- 	"tele_livegrepraw",
-- 	"Live Grep Raw"
-- )
-- -- Debugging Commands
-- Mapper.map(
-- 	"n",
-- 	"<C-e>d",
-- 	":Telescope dap commands<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_dapcmds",
-- 	"Debugging Commands"
-- )
-- -- Mappings
-- Mapper.map(
-- 	"n",
-- 	"<C-e>k",
-- 	":Telescope keymaps<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_keymaps",
-- 	"Mappings"
-- )
-- -- Zoxide
-- Mapper.map(
-- 	"n",
-- 	"<leader><leader>z",
-- 	":Telescope zoxide list<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_z",
-- 	"Zoxide"
-- )
-- -- Search Aerial Symbols
-- Mapper.map(
-- 	"n",
-- 	"<C-e>A",
-- 	":Telescope aerial<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_aerial",
-- 	"Search Aerial Symbols"
-- )
-- -- Open TODOs in QuickFix Window
-- Mapper.map(
-- 	"n",
-- 	"<leader>td",
-- 	":TodoTelescope<CR>",
-- 	opts,
-- 	"Diagnostics",
-- 	"tele_todo",
-- 	"Open TODOs in QuickFix Window"
-- )
-- -- Search Dash for Word Under Cursor
-- Mapper.map(
-- 	"n",
-- 	"<leader><leader>d",
-- 	":DashWord<CR>",
-- 	opts,
-- 	"Telescope",
-- 	"tele_dashword",
-- 	"Search Dash for Word Under Cursor"
-- )

